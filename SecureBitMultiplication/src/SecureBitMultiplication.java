
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Random;
import java.util.Scanner;
import javax.crypto.Cipher;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dineshkasu
 */
public class SecureBitMultiplication
{
    	
	public static EncryptedBit encryptBit(int bitVal, PublicKey publicKey) throws Exception {
		Cipher cipher = Cipher.getInstance("RSA");
		cipher.init(Cipher.ENCRYPT_MODE, publicKey);
		return new EncryptedBit(cipher.doFinal(new byte[] {(byte) bitVal}));
	}

	public static int decryptBit(EncryptedBit encryptedBit, PrivateKey privateKey) throws Exception {
		Cipher cipher = Cipher.getInstance("RSA");
		cipher.init(Cipher.DECRYPT_MODE, privateKey);
		return cipher.doFinal(encryptedBit.bit)[0];
	}
	
    public static void main(String[] args) throws Exception
    {
        int A,B,A1,B1,A2,B2,C1,C2,Output;
              
        // Multiple parties creation
        
         Party[] party;  // Declared a variable of type party[]
         party = new Party[2]; // array is assigned to variable
         
         for ( int z = 0; z < 2; z++ ) 
         {
               party[z] = new Party();
         }
         
        Scanner ConsoleInput = new Scanner(System.in);
        
        System.out.println("Please Enter the A-Single bit Value? 1 or 0");
          A = ConsoleInput.nextInt();
          party[0].SetUserInput(A);
          
        System.out.println("Please Enter the B-Single bit Value? 1 or 0");
          B = ConsoleInput.nextInt();
          party[1].SetUserInput(B);
          
        System.out.println("\n");
       
       //Printing the user input i.e A and B values    
        for ( int v = 0; v < 2; v++ )     
         {
             System.out.println("Party "+v+" has value "+party[v].GetUserInput());       
         }  
        System.out.println("\n");
        
        //Random shares are being generated by parties and also their partial share will be evaluated based on it
        
         Random random = new Random();
           for ( int v = 0; v < 2; v++ )     
         {
             for(int u = 0; u < 2; u++)
             {
                 if(u!=v)
                 {
                     int RS = random.nextInt(2); /*The nextInt() will give the int value between 0-(inclusive) and also the specified value-(exclusive)*/
                     party[u].SetRShare(RS);
                     System.out.println("Party "+v+" sends the random share "+RS+" to party "+u);
                     
                     int PartyBit = party[v].GetUserInput();
                     int PS = PartyBit ^ RS;       // ^ is a JAVA inbuilt XOR operation
                     party[v].SetPShare(PS);
                     System.out.println("Party "+v+" keeps "+PS+" as the corresponding partial share");

                 }
             }     
         }
           
          System.out.println("\n");
         
          //Displaying the Random shares and Partial Shares of parties
          A1 = party[0].GetPShare();
          B1 = party[0].GetRShare();
          A2 = party[1].GetRShare();
          B2 = party[1].GetPShare(); 
          
          System.out.println("a1="+A1);
          System.out.println("a2="+A2);
          System.out.println("b1="+B1);
          System.out.println("b2="+B2);
          
          Output = (A1 ^ A2)*(B1 ^ B2); // ^ is a JAVA inbuilt XOR operation   
          System.out.println("(a1 + a2)*(b1 + b2) = ("+A1+" + "+A2+")*("+B1+" + "+B2+") ="+Output);
          System.out.println("\n");
          
          
          // to generate 4 Public keys...
	  KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
	  KeyPair pair = keyGen.generateKeyPair();
          
          PublicKey[] PK = new PublicKey[4];
          
          for(int p =0; p < PK.length;p++)
          {
              PK[p] = pair.getPublic();
          }
          
          
          int count = 0;
          for(A = 0 ; A < 2; A++)
          {
               for(B = 0 ; B < 2; B++)
               {
                   if((A2 != A) || (B2 != B))
                   { 
                   } 
                   else // A2 value and B2 value equal to that particular row i.e 00,01,10,11
                   {
                      party[1].SetSecretKValue(count);
                   }     
                  count = count + 1;
               } 
          }
          System.out.println("Party 1 generates four public keys and keeps the corresponding secret key for "+party[1].GetSecretKValue());
          
          int r = random.nextInt(2); 
          party[0].SetC1value(r);
          System.out.println("Party 0 generates r = "+party[0].GetC1Value());
           
         //Party A prepares the table and fills the rows with the AB+r values
          Output = 0;
          count = 0;
          r = party[0].GetC1Value();
          EncryptedBit[] EncryptedRow = new EncryptedBit[4];
          
          for(A2 = 0 ; A2 < 2; A2++)
          {
               for(B2 = 0 ; B2 < 2; B2++)
               { 
                   Output = ((A1^A2)*(B1^B2))^r;
                   party[0].Row[count] = Output;
                   
                   System.out.println("row "+count+" = ("+A1+" + "+A2+")*("+B1+" + "+B2+") +"+r+" = "+Output);
                   // to encrypt a the above row value and keep them in the encrypted table
		    EncryptedBit encryptedBit = encryptBit(Output,PK[count]);                
                    EncryptedRow[count] = encryptedBit;        
                    count = count + 1;
               } 
          }
          
         // to decrypt a row bit... 
         PrivateKey privateKey = pair.getPrivate();
         int SecretKeyVal = party[1].GetSecretKValue();
	 C2 = decryptBit(EncryptedRow[SecretKeyVal], privateKey);
         System.out.println("Party 1 decrypts row "+SecretKeyVal+" of the table and gets the value "+C2);
         party[1].SetC2value(C2);
         
         System.out.println("\n");
         party[1].SetC1value(party[0].GetC1Value());        
         System.out.println("Party 0 shares its partial result ("+party[0].GetC1Value()+") with Party 1");
         
         party[0].SetC2value(party[1].GetC2Value());
         System.out.println("Party 1 shares its partial result ("+party[1].GetC2Value()+") with Party 0");
         
         //C1 = r  C2 = AB + r;
         
             C1 = party[0].GetC1Value();
             C2 = party[0].GetC2Value();
         System.out.println("AND is "+(C1^C2));
           
    }
    	static class EncryptedBit {
		byte[] bit;
		
		public EncryptedBit(byte[] bit) {
			this.bit = bit;
		}
	}
}
